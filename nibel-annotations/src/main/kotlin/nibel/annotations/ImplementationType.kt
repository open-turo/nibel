package nibel.annotations

/**
 * [ImplementationType] is used in [UiEntry] and [UiExternalEntry] annotations to define what type
 * of entry class should be generated for the annotated composable function.
 *
 * Depending on the implementation type a generated entry will inherit completely different base
 * classes that are aimed to serve in specific scenarios:
 * - [Fragment] - generates a fragment that uses the annotated composable as its content. It makes
 * the compose screen look like a fragment to other fragments and is crucial in fragment → compose
 * navigation scenarios.
 * - [Composable] - generates a lightweight wrapper over a composable function and reduces the
 * performance overhead by avoiding instantiation of fragment-related classes for this screen. It is
 * normally used in compose → compose and compose → fragment navigation scenarios.
 *
 * See [UiEntry] and [UiExternalEntry] to learn more about the code generated by Nibel depending on
 * implementation types.
 */
enum class ImplementationType {
    /**
     * A fragment that uses the annotated composable as its content.
     *
     * See [ImplementationType].
     */
    Fragment,

    /**
     * Generates a lightweight wrapper over a composable function.
     *
     * See [ImplementationType].
     */
    Composable,
}
